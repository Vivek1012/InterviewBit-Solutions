public class Solution {
    // DO NOT MODIFY THE ARGUMENTS WITH "final" PREFIX. IT IS READ ONLY
    /*
    public int maximumGap(final int[] A) { 
        
        int n = A.length;
        int val = -1;
         
        int t[] = new int[n];
        
        t[0] = A[0];
        
        for(int i = 1; i < n ;i++)
        {
            if(t[i-1] < A[i])
                t[i] = t[i-1];
            else
                t[i] = A[i];
        }
            
        int j = 0; 
        int i = 0;
        int maxdist = 0;
        while(j < n && i < n)
        {
            if(A[j] - t[i] >= 0)
                {
                    j++;
                    maxdist = Math.max(maxdist , j-i-1);
                }
            else 
                i++;
                
        }
        
        if(maxdist < 0)
            return -1;
            
        return maxdist;
    }*/
    
    //There is a problem with above code.
    
    class Node implements Comparable<Node>{
        int n;
        int index;
        public Node(int number,int index) {
            this.n = number;
            this.index = index;
        }
        public int compareTo(Node o) {
            Integer a = this.n;
            Integer b = o.n;
            return a.compareTo(b);
        }
    }
      public int maximumGap(final int[] A) {
          Node[] nodes = new Node[A.length];  
          for(int i=0;i<A.length;i++){
                nodes[i] = new Node(A[i],i);
            }
          Arrays.sort(nodes);
          
          int max = nodes[A.length-1].index;
          
          for(int i = A.length-1;i>=0;i--){

              if(nodes[i].index > max){
                  max = nodes[i].index;
              }
              nodes[i].n = max - nodes[i].index;
            
          }
          
          max = nodes[0].n;
          for(int i=0;i<A.length;i++){
              if(nodes[i].n > max ){
                  max = nodes[i].n;
                
              }
          }
          return max;
          
        }

}
